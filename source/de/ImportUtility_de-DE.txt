This file is update today. Test

package oracle.webcenter.sites.controller

import java.util.Map;
import javax.ws.rs.FormParam;
import javax.ws.rs.*;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.*
import com.fatwire.assetapi.data.*
import com.openmarket.xcelerate.asset.*
import org.apache.commons.lang3.StringUtils
import javax.ws.rs.core.MediaType;

import com.fatwire.rest.beans.AssetBean;
import com.fatwire.rest.beans.Association;
import com.fatwire.rest.beans.Associations;
import com.fatwire.rest.beans.Attribute;
import com.fatwire.rest.beans.Attribute.Data;
import com.fatwire.rest.beans.Blob;
import com.fatwire.wem.sso.SSO;
import com.fatwire.wem.sso.SSOException;
import com.fatwire.wem.sso.SSOSession;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.WebResource.Builder;
import java.util.*
import java.io.*
import java.nio.file.*
import java.io.BufferedReader
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.MediaType;

import org.glassfish.jersey.client.JerseyClient;
import org.glassfish.jersey.client.JerseyClientBuilder;
import org.glassfish.jersey.client.JerseyInvocation.Builder;
import org.glassfish.jersey.client.JerseyWebTarget;

import com.fatwire.rest.beans.AssetBean;
import com.fatwire.rest.beans.Attribute;
import com.fatwire.rest.beans.Attribute.Data;
import com.fatwire.wem.sso.SSO;
import com.fatwire.wem.sso.SSOException;
import com.fatwire.wem.sso.SSOSession;


public class USAStoresImportUtility extends BaseController
{

		@GET
		@Path("/ImportUSAStores")
	     public String readAndCreateUSAStore()
	    {
			//Location of text file to be read				
		     File objFile = new File("D:\\Projects\\Leviton\\ImportFiles\\WTB_USA_CUST.DAT");

			 String customer_name = ""
			 String customer_address1 = ""
			 String customer_address2 = ""
			 String customer_city = ""
			 String customer_state = ""
			 String customer_zipcode = ""
			 String customer_phone = ""
			 String market_code = ""
			 String country = ""
			 String url = ""
			 String accountClass = ""
			 String lineString = ""
			 
			 //Read Text File
		     try{
				 	 BufferedReader br = new BufferedReader(new FileReader(objFile))
					 List<String> lines = new LinkedList<String>(); // create a new list
					 String line = br.readLine(); // read a line at a time
					 while(line != null){ // loop till you have no more lines
						 lines.add(line) // add the line to your list
						 line = br.readLine(); // try to read another line
					 }
					 //Loop through List, extract content, write to WCS
					 for (int i=0 ; i<lines.size() ; i++){
						 lineString = lines.get(i);						 
						 customer_name = lineString.substring(20,50).trim()
						 customer_address1 = lineString.substring(50,80).trim()
						 customer_address2 =lineString.substring(80,110).trim()
						 customer_city = lineString.substring(110,130).trim()
						 customer_state= lineString.substring(130,132).trim()
						 customer_zipcode = lineString.substring(132,137).trim()
						 customer_phone = lineString.substring(137,147).trim()
						 market_code = lineString.substring(147,148).trim()
						 country = lineString.substring(148,168).trim()
						 url = lineString.substring(169,209).trim()
						 //accountClass = lineString.substring(309,311).trim()
						 
						 /*****START REST CREATE*****/
						 
						 // Step 1: Create the JersyClient instance
						 JerseyClient client = JerseyClientBuilder.createClient();
				 
						 // Step 2: WebTarget resource with the base url
						 JerseyWebTarget webTarget = client.target("http://localhost:7003/sites/REST");
				 
						 // Step 3: Multi-ticket generation
						 SSOSession ssoSession = null;
						 String multiticket = null;
						 try
						 {
							 ssoSession = SSO.getSSOSession("SSOConfig.xml");
							 multiticket = ssoSession.getMultiTicket("fwadmin", "xceladmin");
						 }
						 catch (SSOException e)
						 {
							 e.printStackTrace();
						 }
				 
						 // Step 4: Add the multi-ticket to the webtarget resource
						 webTarget = webTarget.queryParam("multiticket", multiticket);
						 
						 // Going to create a flex asset of type XXXX in site YYYY
						 String basicAssetSiteName = "LEV";
						 String basicAssetTypeName = "USADistriLightStore";
				 
						 // Step 5: Add the REST service to be used to the WebTarget resource (Asset creation)
						 webTarget =
								 webTarget.path("sites").path(basicAssetSiteName).path("types")
								 .path(basicAssetTypeName).path("assets").path("0");
				 
						 // Step 6: Create the builder with the supported type response:
						 // - MediaType.APPLICATION_XML
						 // - MediaType.APPLICATION_JSON
						 // And adding the headers:
						 // - Pragma
						 // - X-XSRF-Token to hold the encrypted multi-ticket
						 Builder builder = webTarget.request();
						 builder.accept(MediaType.APPLICATION_XML);
						 //builder.header("Pragma", "auth-redirect=false");
						 builder.header("X-XSRF-Token", multiticket);
								 
						 // Step 7: Create the AssetBean to hold the the asset to be created
						 AssetBean sourceAsset = new AssetBean();
						 
						 // Step 8: Asset data creation
						 sourceAsset.setName("Test USADistriLightStore PUT");
						 
						 // Description - optional field
						 sourceAsset.setDescription("Test USADistriLightStore PUT description")
						 
						 
						  // Add attributes / associations as in the Asset type definition
						  
						  //Attribute: Customer Name
						  Attribute sourceAssetAttribute = new Attribute();
						  Data sourceAssetAttributeData = new Data();
						  sourceAssetAttribute.setName("customername");
						  sourceAssetAttributeData.setStringValue(customer_name);
						  sourceAssetAttribute.setData(sourceAssetAttributeData);
						  sourceAsset.getAttributes().add(sourceAssetAttribute);
						
						 
						  //Attribute: Address Line 1
						  sourceAssetAttribute = new Attribute();
						  sourceAssetAttributeData = new Data();
						  sourceAssetAttribute.setName("customeraddressline1");
						  sourceAssetAttributeData.setStringValue(customer_address1);
						  sourceAssetAttribute.setData(sourceAssetAttributeData);
						  sourceAsset.getAttributes().add(sourceAssetAttribute);
						 
						 
						  //Attribute: Address Line 2
						  sourceAssetAttribute = new Attribute();
						  sourceAssetAttributeData = new Data();
						  sourceAssetAttribute.setName("customeraddressline2");
						  sourceAssetAttributeData.setStringValue(customer_address2);
						  sourceAssetAttribute.setData(sourceAssetAttributeData);
						  sourceAsset.getAttributes().add(sourceAssetAttribute);
					 
					 
						  //Attribute: Customer City
						  sourceAssetAttribute = new Attribute();
						  sourceAssetAttributeData = new Data();
						  sourceAssetAttribute.setName("customercity");
						  sourceAssetAttributeData.setStringValue(customer_city);
						  sourceAssetAttribute.setData(sourceAssetAttributeData);
						  sourceAsset.getAttributes().add(sourceAssetAttribute);
					 
					     //Attribute: State
						 sourceAssetAttribute = new Attribute();
						 sourceAssetAttributeData = new Data();
						 sourceAssetAttribute.setName("customerstate");
						 sourceAssetAttributeData.setStringValue(customer_state);
						 sourceAssetAttribute.setData(sourceAssetAttributeData);
						 sourceAsset.getAttributes().add(sourceAssetAttribute);
						
						 
						 //Attribute: Zipcode
						 sourceAssetAttribute = new Attribute();
						 sourceAssetAttributeData = new Data();
						 sourceAssetAttribute.setName("customerzipcode");
						 sourceAssetAttributeData.setStringValue(customer_zipcode);
						 sourceAssetAttribute.setData(sourceAssetAttributeData);
						 sourceAsset.getAttributes().add(sourceAssetAttribute);
					 
					 
					     //Attribute: Customer Phone
						 sourceAssetAttribute = new Attribute();
						 sourceAssetAttributeData = new Data();
						 sourceAssetAttribute.setName("customerphone");
						 sourceAssetAttributeData.setStringValue(customer_phone);
						 sourceAssetAttribute.setData(sourceAssetAttributeData);
						 sourceAsset.getAttributes().add(sourceAssetAttribute);
					  
					 
					     //Attribute: Account Class
						 sourceAssetAttribute = new Attribute();
						 sourceAssetAttributeData = new Data();
						 sourceAssetAttribute.setName("customeraccountclass");
						 sourceAssetAttributeData.setStringValue(market_code);
						 sourceAssetAttribute.setData(sourceAssetAttributeData);
						 sourceAsset.getAttributes().add(sourceAssetAttribute);
						  
						 
						 //Attribute: Company Url
						 sourceAssetAttribute = new Attribute();
						 sourceAssetAttributeData = new Data();
						 sourceAssetAttribute.setName("companyurl");
						 sourceAssetAttributeData.setStringValue(url);
						 sourceAssetAttribute.setData(sourceAssetAttributeData);
						 sourceAsset.getAttributes().add(sourceAssetAttribute);
					  
						 
						 //Attribute: Get the 2 letter Isocode of the country
					 							 
						 sourceAssetAttribute = new Attribute();
						 sourceAssetAttributeData = new Data();
						 sourceAssetAttribute.setName("twoletterisocountrycode");
						 sourceAssetAttributeData.setStringValue(country);
						 sourceAssetAttribute.setData(sourceAssetAttributeData);
						 sourceAsset.getAttributes().add(sourceAssetAttribute);
						  
						 
						  //To render the asset available for search
						  sourceAssetAttribute = new Attribute();
						  sourceAssetAttributeData = new Data();
						  sourceAssetAttribute.setName("category");
						  sourceAssetAttributeData.setStringValue("g");
						  sourceAssetAttribute.setData(sourceAssetAttributeData);
						  sourceAsset.getAttributes().add(sourceAssetAttribute);
				 
						 // Mandatory: Spicify the site and the Asset type definition/subtype
						 sourceAsset.getPublists().add(basicAssetSiteName);
						 sourceAsset.setSubtype(basicAssetTypeName);
						 
						 // Step 8: Entity creation with the asset data
						 Entity<AssetBean> theEntity = Entity.entity(sourceAsset, MediaType.APPLICATION_XML);
						 
						 // Step 9: Use the builder created with the REST service to make the PUT of the Entity indication the class of the entity content
						 AssetBean resultAsset = builder.put(theEntity, AssetBean.class);
						 
						 
						 
						 /******END REST CREATE*****/
						 					 
					 }					 					 
		
		     }
	         catch(IOException e){
	
	             System.out.println(e);
	         }
			 

			 
			 return lineString
			
		}
		


    // it is invoked when this controller is associated to a template
    public void doWork(Map models) {  }
}
